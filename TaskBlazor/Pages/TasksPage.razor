@page "/tasks"
@inject NavigationManager nav
@inject HttpClient client
@using TaskBlazor.Entities

<PageTitle>Shops</PageTitle>
<h1 style="text-align:center;">Tasks</h1>
<button class="btn btn-secondary" @onclick="PutMe" style="text-align:end; text-decoration:dotted; text-decoration-color:revert; color:aqua;">Add new task</button>
<br />
<br />
@if (task == null)
{
    <center>
        <div class="spinner-grow text-primary" role="status" style="width:20rem;height:20rem;margin:5%;">
            <span class="visually-hidden" style="font-size:20%;">Loading...</span>
        </div>
    </center>
    <center>
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Loading...
        </button>
    </center>
}
else
{

    foreach (var taskcha in task!)
    {
        <div style="display:flex; justify-content:center; border: 3px solid black; width: 100%; height: 50px;">
            <div style="width: 40%; margin-right:50px;display:flex; justify-content:left;">
                 <h4 style="text-align:left; left:0;">@taskcha.Title</h4>
            </div>
            <div style="width: 20%">
                <h6 style="text-align:center; color:gray; padding-top: 3px;">@taskcha.State</h6>
            </div>
            <div style="width: 30%; right:0; left:auto; display:flex; justify-content:right;">
                <button @onclick="()=> GoToTask(taskcha.Id)" class="btn btn-primary" style="margin: 2px 0;">Details</button>
                <button @onclick="async ()=> await Delete(taskcha.Id)" class="btn btn-danger" style="margin: 2px 0;">Delete</button>
                <button @onclick="()=> Update(taskcha.Id)" class="btn btn-success" style="margin: 2px 0;">Update</button>
            </div>
        </div>
        <br />
    }
}

@code {
    public List<Entities.Task>? task = new List<Entities.Task>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        task = await client.GetFromJsonAsync<List<Entities.Task>>("http://localhost:7701/api/Task");
    }

    void PutMe()
    {
        nav.NavigateTo("/add");
    }

    private void GoToTask(Guid id)
    {
        nav.NavigateTo($"/task/details/{id}");
    }


    private async System.Threading.Tasks.Task Delete(Guid id)
    {
        await client.DeleteAsync($"http://localhost:7701/api/Task/{id}");
        await OnInitializedAsync();
    }

    private void Update(Guid id)
    {
        nav.NavigateTo($"/update/{id}");
    }
}
