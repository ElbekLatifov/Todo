@page "/tasks"
@inject NavigationManager nav
@inject HttpClient client
@using TaskBlazor.Entities
@using TaskBlazor.Models

<PageTitle>Shops</PageTitle>
<h1 style="text-align:center;">Tasks</h1>
<button class="btn btn-secondary" @onclick="PutMe" style="text-align:end; text-decoration:dotted; text-decoration-color:revert; color:aqua;">Add new task</button>
<br />
<br />
@if (task == null)
{
    <center>
        <div class="spinner-grow text-primary" role="status" style="width:20rem;height:20rem;margin:5%;">
            <span class="visually-hidden" style="font-size:20%;">Loading...</span>
        </div>
    </center>
    <center>
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Loading...
        </button>
    </center>
}
else
{
    <ul class="list-group list-group-flush">
        
            @foreach (var taskcha in formModels!)
            {
            <li class="list-group-item">
                <div class="row" style="display:flex; justify-content:center; width: 100%;">
                    <div class="col" style="width: 40%; display:flex; justify-content:left;">
                        <h5 style="text-align:left; padding-top: 10px; text-decoration:double;">@taskcha.Title</h5>
                    </div>
                    <div class="col" style="width: 20%">
                        <h6 style="text-align:center; color:gray; padding-top: 10px;">@taskcha.State</h6>
                    </div>
                    <div class="col" style="width: 30%; right:0; left:auto; display:flex; justify-content:right;">
                        <button @onclick="()=> GoToTask(taskcha.Id)" class="btn btn-primary" style="margin: 5px; height:35px;">Details</button>
                        <button class="btn btn-danger" @onclick="() => {taskcha.IsDeadClick = true;}" style="margin: 5px; height:35px;">Delete</button>
                        <button @onclick="()=> Update(taskcha.Id)" class="btn btn-success" style="margin: 5px; height:35px;">Update</button>
                    </div>
                </div>
                @if (taskcha.IsDeadClick)
                {
                    <div class="alert alert-danger row" role="alert">
                        <p class="col" style="width: 60%; margin-right:50px;">Are you sure want to delete this task?</p>
                        <button class="col btn btn-info" @onclick="()=>{taskcha.IsDeadClick = false;}" style="width: 20%">No</button>
                        <button class="col btn btn-secondary" @onclick="async ()=> await Delete(taskcha.Id)" style="width: 20%">Yes</button>
                    </div>
                }
            </li>
            }
       
    </ul>    
}

@code {
    public List<Entities.Task>? task = new List<Entities.Task>();
    private List<FormModel> formModels = new List<FormModel>();


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        task = await client.GetFromJsonAsync<List<Entities.Task>>("http://localhost:7701/api/Task");

        for(int i=0; i<task.Count;i++)
        {
            FormModel form = new FormModel();
            form.Id = task[i].Id;
            form.Title = task[i].Title;
            form.Description = task[i].Description;
            form.Deadline = task[i].Deadline;
            form.State = task[i].State;
            formModels.Add(form);
        }
    }

    void PutMe()
    {
        nav.NavigateTo("/add");
    }

    private void GoToTask(Guid id)
    {
        nav.NavigateTo($"/task/details/{id}");
    }


    private async System.Threading.Tasks.Task Delete(Guid id)
    {
        await client.DeleteAsync($"http://localhost:7701/api/Task/{id}");
        formModels = new List<FormModel>();
        await OnInitializedAsync();
    }

    private void Update(Guid id)
    {
        nav.NavigateTo($"/update/{id}");
    }
}
