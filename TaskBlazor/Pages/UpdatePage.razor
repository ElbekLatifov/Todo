@page "/update/{Id:guid}"
@using TaskBlazor.Models
@inject NavigationManager Navigate
@inject HttpClient Client


<center>
    <h3>Update Task</h3>
</center>


<center>
    <EditForm Model="taskModel">
        <DataAnnotationsValidator />
        <div>
            <label for="Title" class="form-label">Title</label>
            <InputText @bind-Value="taskModel.Title" class="form-control" style="width:40%;">@task.Title</InputText>
            <ValidationMessage For="() => taskModel.Title" /><br /><br />
            <label for="Desciption" class="form-label">Description</label>
            <InputTextArea @bind-Value="taskModel.Description" class="form-control" style="width:40%;">@task.Description</InputTextArea>
            <ValidationMessage For="() => taskModel.Description" /><br /><br />
            <label for="Deadline" class="form-label">Deadline</label>
            <InputDate @bind-Value="taskModel.Deadline" style="width:40%;">@task.Deadline</InputDate> <br /><br /><br />
            <button class="form-control btn btn-success" type="button" @onclick="async () => await Update()" style="width:40%;">Update task</button>
        </div>

    </EditForm>
</center>




@code {
    [Parameter]
    public Guid Id { get; set; }
    public List<Entities.Task>? tasks = new List<Entities.Task>();
    public Entities.Task task = new Entities.Task();

    private TaskModel taskModel = new TaskModel();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        tasks = await Client.GetFromJsonAsync<List<Entities.Task>>("http://localhost:7701/api/Task");
        if(tasks != null && tasks.Any(p=>p.Id == Id))
        task = tasks.First(p => p.Id == Id);
    }

    private async Task Update()
    {
        await Client.PutAsJsonAsync<TaskModel>($"http://localhost:7701/api/Task/{Id}", taskModel);
        Navigate.NavigateTo("/tasks");
    }
}
