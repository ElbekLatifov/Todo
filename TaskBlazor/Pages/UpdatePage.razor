@page "/update/{Id:guid}"
@using TaskBlazor.Models
@inject NavigationManager Navigate
@inject HttpClient Client


<center>
    <h3>Update Task</h3>
</center>


<EditForm Model="taskModel">
    <hr />
    <div class="form-group row">
        <label for="title" class="col-sm-2 col-form-label">
            Title
        </label>
        <div class="col-sm-10">
            <InputText id="title" class="form-control" placeholder="@task.Title"
            @bind-Value="taskModel.Title" />
        </div>
    </div>
    <div class="form-group row">
        <label for="description" class="col-sm-2 col-form-label">
            Description
        </label>
        <div class="col-sm-10">
            <InputTextArea id="description" class="form-control" placeholder="@task.Description"
            @bind-Value="taskModel.Description" />
        </div>
    </div>
    <div class="form-group row">
        <label for="date" class="col-sm-2 col-form-label">
            Deadline
        </label>
        <div class="col-sm-10">
            <InputDate Type="InputDateType.DateTimeLocal" id="date" class="form-control" placeholder="Deadline"
            @bind-Value="taskModel.Deadline" />
        </div>
    </div>
    <center class="row">
        <button class="form-control btn btn-success col" type="button" @onclick="async () => await Update()" style="width:20%;">Update</button>
        <button class="form-control btn btn-success col" type="button" @onclick="async () => Back()" style="width:20%;">Update</button>
    </center>
   
</EditForm>




@code {
    [Parameter]
    public Guid Id { get; set; }
    public Entities.Task? task = new Entities.Task();
    private TaskModel taskModel = new TaskModel();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        task = await Client.GetFromJsonAsync<Entities.Task>($"http://localhost:7701/api/Task/{Id}");
        taskModel.Title = task.Title;
        taskModel.Description = task.Description;
        taskModel.Deadline = task.Deadline;
    }

    private async Task Update()
    {
        if (taskModel.Description == null) taskModel.Description = task.Description;
        if (taskModel.Title == string.Empty) taskModel.Title = task.Title;
        if (taskModel.Deadline == null) taskModel.Deadline = task.Deadline;

        await Client.PutAsJsonAsync<TaskModel>($"http://localhost:7701/api/Task/{Id}", taskModel);
        Navigate.NavigateTo("/tasks");
    }

    private void Back()
    {
        Navigate.NavigateTo("/tasks");
    }
}
